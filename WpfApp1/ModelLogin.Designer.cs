//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Windows.Media;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("TravelModel", "FK_Hotel_Country", "Country", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(WpfApp1.Country), "Hotel", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.Hotel), true)]
[assembly: EdmRelationshipAttribute("TravelModel", "FK_HotelComment_Hotel", "Hotel", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(WpfApp1.Hotel), "HotelComment", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.HotelComment), true)]
[assembly: EdmRelationshipAttribute("TravelModel", "FK_HotelImage_Hotel", "Hotel", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One, typeof(WpfApp1.Hotel), "HotelImage", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.HotelImage), true)]
[assembly: EdmRelationshipAttribute("TravelModel", "HotelOfTour", "Hotel", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.Hotel), "Tour", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.Tour))]
[assembly: EdmRelationshipAttribute("TravelModel", "TypeOfTour", "Tour", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.Tour), "Type", System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WpfApp1.Type))]

#endregion

namespace WpfApp1
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class TravelEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект TravelEntities, используя строку соединения из раздела "TravelEntities" файла конфигурации приложения.
        /// </summary>
        public TravelEntities() : base("name=TravelEntities", "TravelEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TravelEntities.
        /// </summary>
        public TravelEntities(string connectionString) : base(connectionString, "TravelEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TravelEntities.
        /// </summary>
        public TravelEntities(EntityConnection connection) : base(connection, "TravelEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Country> Country
        {
            get
            {
                if ((_Country == null))
                {
                    _Country = base.CreateObjectSet<Country>("Country");
                }
                return _Country;
            }
        }
        private ObjectSet<Country> _Country;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Hotel> Hotel
        {
            get
            {
                if ((_Hotel == null))
                {
                    _Hotel = base.CreateObjectSet<Hotel>("Hotel");
                }
                return _Hotel;
            }
        }
        private ObjectSet<Hotel> _Hotel;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<HotelComment> HotelComment
        {
            get
            {
                if ((_HotelComment == null))
                {
                    _HotelComment = base.CreateObjectSet<HotelComment>("HotelComment");
                }
                return _HotelComment;
            }
        }
        private ObjectSet<HotelComment> _HotelComment;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<HotelImage> HotelImage
        {
            get
            {
                if ((_HotelImage == null))
                {
                    _HotelImage = base.CreateObjectSet<HotelImage>("HotelImage");
                }
                return _HotelImage;
            }
        }
        private ObjectSet<HotelImage> _HotelImage;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Tour> Tour
        {
            get
            {
                if ((_Tour == null))
                {
                    _Tour = base.CreateObjectSet<Tour>("Tour");
                }
                return _Tour;
            }
        }
        private ObjectSet<Tour> _Tour;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Type> Type
        {
            get
            {
                if ((_Type == null))
                {
                    _Type = base.CreateObjectSet<Type>("Type");
                }
                return _Type;
            }
        }
        private ObjectSet<Type> _Type;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Country. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCountry(Country country)
        {
            base.AddObject("Country", country);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Hotel. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHotel(Hotel hotel)
        {
            base.AddObject("Hotel", hotel);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet HotelComment. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHotelComment(HotelComment hotelComment)
        {
            base.AddObject("HotelComment", hotelComment);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet HotelImage. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToHotelImage(HotelImage hotelImage)
        {
            base.AddObject("HotelImage", hotelImage);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Tour. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTour(Tour tour)
        {
            base.AddObject("Tour", tour);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Type. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToType(Type type)
        {
            base.AddObject("Type", type);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Country.
        /// </summary>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Country CreateCountry(global::System.String code, global::System.String name)
        {
            Country country = new Country();
            country.Code = code;
            country.Name = name;
            return country;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false, "Code");
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_Hotel_Country", "Hotel")]
        public EntityCollection<Hotel> Hotel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Hotel>("TravelModel.FK_Hotel_Country", "Hotel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Hotel>("TravelModel.FK_Hotel_Country", "Hotel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="Hotel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Hotel : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Hotel.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="countOfStars">Исходное значение свойства CountOfStars.</param>
        /// <param name="countryCode">Исходное значение свойства CountryCode.</param>
        public static Hotel CreateHotel(global::System.Int32 id, global::System.String name, global::System.Int32 countOfStars, global::System.String countryCode)
        {
            Hotel hotel = new Hotel();
            hotel.Id = id;
            hotel.Name = name;
            hotel.CountOfStars = countOfStars;
            hotel.CountryCode = countryCode;
            return hotel;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountOfStars
        {
            get
            {
                return _CountOfStars;
            }
            set
            {
                OnCountOfStarsChanging(value);
                ReportPropertyChanging("CountOfStars");
                _CountOfStars = StructuralObject.SetValidValue(value, "CountOfStars");
                ReportPropertyChanged("CountOfStars");
                OnCountOfStarsChanged();
            }
        }
        private global::System.Int32 _CountOfStars;
        partial void OnCountOfStarsChanging(global::System.Int32 value);
        partial void OnCountOfStarsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CountryCode
        {
            get
            {
                return _CountryCode;
            }
            set
            {
                OnCountryCodeChanging(value);
                ReportPropertyChanging("CountryCode");
                _CountryCode = StructuralObject.SetValidValue(value, false, "CountryCode");
                ReportPropertyChanged("CountryCode");
                OnCountryCodeChanged();
            }
        }
        private global::System.String _CountryCode;
        partial void OnCountryCodeChanging(global::System.String value);
        partial void OnCountryCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_Hotel_Country", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TravelModel.FK_Hotel_Country", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TravelModel.FK_Hotel_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TravelModel.FK_Hotel_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("TravelModel.FK_Hotel_Country", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_HotelComment_Hotel", "HotelComment")]
        public EntityCollection<HotelComment> HotelComment
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HotelComment>("TravelModel.FK_HotelComment_Hotel", "HotelComment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HotelComment>("TravelModel.FK_HotelComment_Hotel", "HotelComment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_HotelImage_Hotel", "HotelImage")]
        public EntityCollection<HotelImage> HotelImage
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HotelImage>("TravelModel.FK_HotelImage_Hotel", "HotelImage");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HotelImage>("TravelModel.FK_HotelImage_Hotel", "HotelImage", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "HotelOfTour", "Tour")]
        public EntityCollection<Tour> Tour
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tour>("TravelModel.HotelOfTour", "Tour");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tour>("TravelModel.HotelOfTour", "Tour", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="HotelComment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HotelComment : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта HotelComment.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="hotelId">Исходное значение свойства HotelId.</param>
        /// <param name="text">Исходное значение свойства Text.</param>
        /// <param name="author">Исходное значение свойства Author.</param>
        /// <param name="creationDate">Исходное значение свойства CreationDate.</param>
        public static HotelComment CreateHotelComment(global::System.Int32 id, global::System.Int32 hotelId, global::System.String text, global::System.String author, global::System.DateTime creationDate)
        {
            HotelComment hotelComment = new HotelComment();
            hotelComment.Id = id;
            hotelComment.HotelId = hotelId;
            hotelComment.Text = text;
            hotelComment.Author = author;
            hotelComment.CreationDate = creationDate;
            return hotelComment;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HotelId
        {
            get
            {
                return _HotelId;
            }
            set
            {
                OnHotelIdChanging(value);
                ReportPropertyChanging("HotelId");
                _HotelId = StructuralObject.SetValidValue(value, "HotelId");
                ReportPropertyChanged("HotelId");
                OnHotelIdChanged();
            }
        }
        private global::System.Int32 _HotelId;
        partial void OnHotelIdChanging(global::System.Int32 value);
        partial void OnHotelIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Text
        {
            get
            {
                return _Text;
            }
            set
            {
                OnTextChanging(value);
                ReportPropertyChanging("Text");
                _Text = StructuralObject.SetValidValue(value, false, "Text");
                ReportPropertyChanged("Text");
                OnTextChanged();
            }
        }
        private global::System.String _Text;
        partial void OnTextChanging(global::System.String value);
        partial void OnTextChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Author
        {
            get
            {
                return _Author;
            }
            set
            {
                OnAuthorChanging(value);
                ReportPropertyChanging("Author");
                _Author = StructuralObject.SetValidValue(value, false, "Author");
                ReportPropertyChanged("Author");
                OnAuthorChanged();
            }
        }
        private global::System.String _Author;
        partial void OnAuthorChanging(global::System.String value);
        partial void OnAuthorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationDate
        {
            get
            {
                return _CreationDate;
            }
            set
            {
                OnCreationDateChanging(value);
                ReportPropertyChanging("CreationDate");
                _CreationDate = StructuralObject.SetValidValue(value, "CreationDate");
                ReportPropertyChanged("CreationDate");
                OnCreationDateChanged();
            }
        }
        private global::System.DateTime _CreationDate;
        partial void OnCreationDateChanging(global::System.DateTime value);
        partial void OnCreationDateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_HotelComment_Hotel", "Hotel")]
        public Hotel Hotel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelComment_Hotel", "Hotel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelComment_Hotel", "Hotel").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hotel> HotelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelComment_Hotel", "Hotel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hotel>("TravelModel.FK_HotelComment_Hotel", "Hotel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="HotelImage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HotelImage : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта HotelImage.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="hotelId">Исходное значение свойства HotelId.</param>
        /// <param name="imageSource">Исходное значение свойства ImageSource.</param>
        public static HotelImage CreateHotelImage(global::System.Int32 id, global::System.Int32 hotelId, global::System.Byte[] imageSource)
        {
            HotelImage hotelImage = new HotelImage();
            hotelImage.Id = id;
            hotelImage.HotelId = hotelId;
            hotelImage.ImageSource = imageSource;
            return hotelImage;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HotelId
        {
            get
            {
                return _HotelId;
            }
            set
            {
                OnHotelIdChanging(value);
                ReportPropertyChanging("HotelId");
                _HotelId = StructuralObject.SetValidValue(value, "HotelId");
                ReportPropertyChanged("HotelId");
                OnHotelIdChanged();
            }
        }
        private global::System.Int32 _HotelId;
        partial void OnHotelIdChanging(global::System.Int32 value);
        partial void OnHotelIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] ImageSource
        {
            get
            {
                return StructuralObject.GetValidValue(_ImageSource);
            }
            set
            {
                OnImageSourceChanging(value);
                ReportPropertyChanging("ImageSource");
                _ImageSource = StructuralObject.SetValidValue(value, false, "ImageSource");
                ReportPropertyChanged("ImageSource");
                OnImageSourceChanged();
            }
        }
        private global::System.Byte[] _ImageSource;
        partial void OnImageSourceChanging(global::System.Byte[] value);
        partial void OnImageSourceChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "FK_HotelImage_Hotel", "Hotel")]
        public Hotel Hotel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelImage_Hotel", "Hotel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelImage_Hotel", "Hotel").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Hotel> HotelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Hotel>("TravelModel.FK_HotelImage_Hotel", "Hotel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Hotel>("TravelModel.FK_HotelImage_Hotel", "Hotel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="Tour")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tour : EntityObject
    {
        public string ImdPath
        {
            get
            {
                return "/Resources/" + this.Name + ".jpg";
            }
        }

        public string RubPrice
        {
            get
            {
                return this.Price + "руб.";
            }
        }

        public string State
        {
            get
            {
                if (this.IsActual)
                { return "актуален"; }
                else
                { return "неактуален"; }
            }
        }

        public string MyTicketCount
        {
            get
            {
                return "билетов:" + this.TicketCount;
            }
        }

        public SolidColorBrush colorBrush
        {
            get
            {
                if (this.IsActual)
                { return Brushes.Green; }
                else
                { return Brushes.Red; }
            }
        }

        #region Фабричный метод

        /// <summary>
        /// Создание нового объекта Tour.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="ticketCount">Исходное значение свойства TicketCount.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="price">Исходное значение свойства Price.</param>
        /// <param name="isActual">Исходное значение свойства IsActual.</param>
        public static Tour CreateTour(global::System.Int32 id, global::System.Int32 ticketCount, global::System.String name, global::System.Decimal price, global::System.Boolean isActual)
        {
            Tour tour = new Tour();
            tour.Id = id;
            tour.TicketCount = ticketCount;
            tour.Name = name;
            tour.Price = price;
            tour.IsActual = isActual;
            return tour;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TicketCount
        {
            get
            {
                return _TicketCount;
            }
            set
            {
                OnTicketCountChanging(value);
                ReportPropertyChanging("TicketCount");
                _TicketCount = StructuralObject.SetValidValue(value, "TicketCount");
                ReportPropertyChanged("TicketCount");
                OnTicketCountChanged();
            }
        }
        private global::System.Int32 _TicketCount;
        partial void OnTicketCountChanging(global::System.Int32 value);
        partial void OnTicketCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] ImagePreview
        {
            get
            {
                return StructuralObject.GetValidValue(_ImagePreview);
            }
            set
            {
                OnImagePreviewChanging(value);
                ReportPropertyChanging("ImagePreview");
                _ImagePreview = StructuralObject.SetValidValue(value, true, "ImagePreview");
                ReportPropertyChanged("ImagePreview");
                OnImagePreviewChanged();
            }
        }
        private global::System.Byte[] _ImagePreview;
        partial void OnImagePreviewChanging(global::System.Byte[] value);
        partial void OnImagePreviewChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Price
        {
            get
            {
                return _Price;
            }
            set
            {
                OnPriceChanging(value);
                ReportPropertyChanging("Price");
                _Price = StructuralObject.SetValidValue(value, "Price");
                ReportPropertyChanged("Price");
                OnPriceChanged();
            }
        }
        private global::System.Decimal _Price;
        partial void OnPriceChanging(global::System.Decimal value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActual
        {
            get
            {
                return _IsActual;
            }
            set
            {
                OnIsActualChanging(value);
                ReportPropertyChanging("IsActual");
                _IsActual = StructuralObject.SetValidValue(value, "IsActual");
                ReportPropertyChanged("IsActual");
                OnIsActualChanged();
            }
        }
        private global::System.Boolean _IsActual;
        partial void OnIsActualChanging(global::System.Boolean value);
        partial void OnIsActualChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "HotelOfTour", "Hotel")]
        public EntityCollection<Hotel> Hotel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Hotel>("TravelModel.HotelOfTour", "Hotel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Hotel>("TravelModel.HotelOfTour", "Hotel", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "TypeOfTour", "Type")]
        public EntityCollection<Type> Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Type>("TravelModel.TypeOfTour", "Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Type>("TravelModel.TypeOfTour", "Type", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TravelModel", Name="Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Type : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Type.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Type CreateType(global::System.Int32 id, global::System.String name)
        {
            Type type = new Type();
            type.Id = id;
            type.Name = name;
            return type;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TravelModel", "TypeOfTour", "Tour")]
        public EntityCollection<Tour> Tour
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tour>("TravelModel.TypeOfTour", "Tour");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tour>("TravelModel.TypeOfTour", "Tour", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
